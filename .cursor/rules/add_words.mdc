---
description: Add words to directory
globs: 
alwaysApply: false
---
## Steps for adding a new word

## What words to include

The rule is simple as fuck: If Google/dictionaries would define it, we should too.

✅ Include:
- Pretty much ANY real word that you'd find in a dictionary
- Basic words like "hotel", "center", "international" - if someone might look it up, it belongs here
- Words that seem "obvious" to native speakers but might not be to others
- Multiple forms of words (like "reviews" even though "review" exists)
- Different spellings (center/centre) - just pick one and note the variant

❌ Only exclude:
- Proper nouns (names of specific people, places, brands)
- Words that ONLY exist as part of proper nouns (like "united" in "United States")
- Brand names (unless they've become generic terms like "google" as a verb)

That's it. No overthinking. No "is this word complex enough?" bullshit.

Remember: We're building a dictionary. If someone might look it up, it belongs here. Period.

Examples of words we SHOULD include that you might be tempted to skip:
- "hotel" (basic but needed)
- "international" (seems obvious but isn't to everyone)
- "center" (common but has multiple meanings)
- "book" (basic as fuck but still needs defining)
- "the" (yes, even articles - non-native speakers need these explained)

The only real question should be: "Would this be in a normal dictionary?" If yes, add it.

## Multiple definitions

Many words have multiple meanings - don't try to cram them all into one definition. Instead:

✅ DO THIS:
- Split different meanings into separate definitions
- Make each definition clear and focused on ONE meaning
- Order them from most common/modern usage to less common
- Keep each definition simple and independent

❌ DON'T DO THIS:
- Don't write "This can mean X, Y, or Z" in a single definition
- Don't try to connect different meanings with "or" and "also"
- Don't skip less common meanings just because they're not the main one

Example of good multiple definitions:
```program: {
  definitions: [
    {
      text: "Software that runs on computers or phones",  // Most common modern usage
    },
    {
      text: "A plan that tells you what's gonna happen and when",  // Second meaning
    },
    {
      text: "A structured set of steps to achieve something",  // Third meaning
    }
  ]
}
```

Remember: If you find yourself writing "or" or "also" in a definition, you probably should split it into multiple definitions!

---

**If the script gives you multiple words, check each one against the directory criteria. If at least one word fits, proceed with that word and ignore the others that don't fit. If no words fit, try running the script again. After 3 attempts with no fitting words, stop and tell the user you couldn't find any words that match the directory criteria.**

## If no words are provided

In case the user does not specify any words to add, it means you should:

1. Get the words yourself by running the command `npx ts-node scripts/get_words.ts`
   - This script will get words from the English directory you should add
   - Check for any existing words in `src/data/words.ts`
   - And return words that don't yet exist
2. Come up with a human readable definition
   - In your response, start a <thinking> block
   - Within the <thinking> block:
      a. Analyze ALL words returned from the script
      b. Think through how each word is used in real life
      c. Based on that, decide if the word has one or more definitions, and what definitions exactly
      d. Write each definition and the examples for ALL words
      e. Do not skip any words or split them into multiple edits
      f. It is important that you think about EVERY SINGLE WORD, and HOW they are used in the real world to get all contexts/definitions.
3. Execute
   - Add ALL words to the file `src/data/words.ts` at the bottom of the file
   - Don't use the edit_file tool. Instead, add the words to a codeblock! (allows the user to copy/paste manually)
   - Do not split the additions into multiple edits or responses
   - All words from the script output should be added in one go
   - Make sure to lowercase the words!

### If a specific word is provided, or multiple words

1. Ensure it's human readable and has relatable examples
2. Check if the word already exists (follow [searching_words.mdc](mdc:.cursor/rules/searching_words.mdc))
3. Read max 200 lines of the file `src/data/words.ts` (ensures the word you're adding is consistent)
4. If it does not exist, you can add the word to `src/data/words.ts`

## Human readable definitions

When generating word definitions, they must be human readable and make sense. Unlike other definition sites where they define words with a bunch of other words that nobody understands, this dataset/site we're building makes everything stupid simple.

Example with the word "Absolutely":
❌ "Without qualification or restriction; completely." (what the fuck does this even mean)
✅ "When you want to say 'yes' but in a really strong way. It means you completely agree or are totally sure about something. Think of it like saying 'yes' with extra power behind it. It can also mean something is totally complete or 100% true with no doubts." (everybody gets this)

## Handling controversial or offensive words

Don't shy away from controversial words - they're part of language too. But handle them like this:

1. Keep it real
   - Don't moralize or preach
   - Don't tiptoe around it
   - Just explain what's up with the word

2. Structure the definition like:
   - "Technically means X, but people use it like Y"
   - Include both original/technical meaning and common usage
   - Acknowledge if it pisses some people off, but don't make it a huge deal

3. Examples should show:
   - How it's commonly used (the real shit)
   - The technical/original usage if relevant
   - Mix of contexts to show the full picture

Remember: We're not here to judge or censor - we're here to explain words how people actually use them. Let users make their own choices about what words to use.

## Data to generate

// src/data/words.ts
import { TDictionary } from "@/types/word";

export const words: TDictionary = {
  wordName: {
    definitions: [{ text: "readable definition" }], // this can have 1 or more definitions, depending on the word
    examples: ["Example 1", "Example 2"], // must be readable too, add 4-6 examples
    pronunciation: "pronunciation goes here"
  }
};